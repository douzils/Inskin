package com.inskin.app

import android.content.Intent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Nfc
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.flow.StateFlow

@Composable
fun ReadScreen(vm: NfcViewModel) {
    ReadScreen(tagInfoFlow = vm.tagInfo)
}

@Composable
fun ReadScreen(tagInfoFlow: StateFlow<TagInfo?>) {
    val tagInfo = tagInfoFlow.collectAsState().value
    val clipboard = LocalClipboardManager.current
    val context = LocalContext.current

    Column(Modifier.fillMaxSize().padding(16.dp)) {
        if (tagInfo == null) {
            Waiting()
        } else {
            TagDetails(
                tag = tagInfo,
                onCopy = { clipboard.setText(AnnotatedString(it)) },
                onShare = { text ->
                    val send = Intent(Intent.ACTION_SEND).apply {
                        type = "text/plain"
                        putExtra(Intent.EXTRA_TEXT, text)
                    }
                    context.startActivity(Intent.createChooser(send, null))
                }
            )
        }
    }
}

@Composable
private fun Waiting() {
    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Icon(Icons.Filled.Nfc, contentDescription = null, modifier = Modifier.size(96.dp))
        Spacer(Modifier.height(12.dp))
        Text("Approchez un tag NFC")
    }
}

@Composable
private fun TagDetails(
    tag: TagInfo,
    onCopy: (String) -> Unit,
    onShare: (String) -> Unit
) {
    val used = tag.used.coerceAtLeast(0)
    val cap = tag.size.coerceAtLeast(0)
    val ratio = if (cap > 0) used.toFloat() / cap else 0f
    val free = (cap - used).coerceAtLeast(0)

    Card(Modifier.fillMaxWidth()) {
        Row(Modifier.padding(16.dp), verticalAlignment = Alignment.CenterVertically) {
            Box(Modifier.size(84.dp), contentAlignment = Alignment.Center) {
                Canvas(Modifier.fillMaxSize()) {
                    drawArc(
                        color = MaterialTheme.colorScheme.surfaceVariant,
                        startAngle = -90f, sweepAngle = 360f,
                        useCenter = false, style = Stroke(10f)
                    )
                    drawArc(
                        color = MaterialTheme.colorScheme.primary,
                        startAngle = -90f, sweepAngle = 360f * ratio,
                        useCenter = false, style = Stroke(10f)
                    )
                }
                Text("${(ratio * 100).toInt()}%")
            }
            Spacer(Modifier.width(16.dp))
            Column {
                Text("Stockage NDEF", style = MaterialTheme.typography.titleMedium)
                Text("Utilisé: $used B / Capacité: $cap B")
                Text("Libre: $free B")
            }
        }
    }

    Spacer(Modifier.height(16.dp))

    Card(Modifier.fillMaxWidth()) {
        Column(Modifier.padding(16.dp)) {
            Info("UID", tag.uid ?: "—")
            Info("Type", tag.type ?: "—")
            Info("Techs", tag.techs.joinToString())
            Info("ATQA", tag.atqa ?: "—")
            Info("SAK", tag.sak ?: "—")
            Info("Writable", if (tag.writable) "Oui" else "Non")
            Info("Read-only", if (tag.readonly) "Oui" else "Non")
        }
    }

    Spacer(Modifier.height(16.dp))

    Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
        Button(onClick = { onCopy(tag.uid.orEmpty()) }) { Text("Copier l’UID") }
        Button(onClick = { onShare(tag.uid.orEmpty()) }) { Text("Partager") }
    }
}

@Composable
private fun Info(label: String, value: String) {
    Row(
        Modifier.fillMaxWidth().padding(vertical = 6.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(label, color = MaterialTheme.colorScheme.onSurfaceVariant)
        Text(value)
    }
}
