package com.inskin.app

import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.tooling.preview.Preview
import com.inskin.app.model.WriteItem

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun WriteScreen(vm: NfcViewModel) {
    var items by remember { mutableStateOf<List<WriteItem>>(emptyList()) }
    var showSheet by remember { mutableStateOf(false) }
    var input by remember { mutableStateOf("") }
    val status by vm.writeStatus.collectAsState()

    Scaffold(
        floatingActionButton = {
            FloatingActionButton(onClick = { showSheet = true }) {
                Icon(Icons.Filled.Add, contentDescription = "Ajouter")
            }
        }
    ) { padding ->
        Column(Modifier.padding(padding).fillMaxSize().padding(16.dp)) {

            // Liste des éléments à écrire
            LazyColumn(Modifier.weight(1f).fillMaxWidth()) {
                itemsIndexed(items) { index, item ->
                    ListItem(
                        headlineContent = { Text(itemLabel(item)) },
                        trailingContent = {
                            TextButton(onClick = {
                                items = items.toMutableList().also { it.removeAt(index) }
                            }) { Text("Suppr") }
                        }
                    )
                    Divider()
                }
            }

            Spacer(Modifier.height(12.dp))

            // Bouton "Write to tag"
            Button(
                onClick = { vm.armWrite(items) },
                enabled = items.isNotEmpty(),
                modifier = Modifier.align(Alignment.CenterHorizontally)
            ) { Text("Write to tag") }

            Spacer(Modifier.height(12.dp))

            // Etat
            when (val s = status) {
                is WriteStatus.Idle -> Text("Prêt")
                is WriteStatus.Armed -> Text("Approche un badge…")
                is WriteStatus.Writing -> Text("Écriture en cours…")
                is WriteStatus.Success -> Text("Écriture réussie ✅")
                is WriteStatus.Error -> Text("Erreur: ${s.message}", color = MaterialTheme.colorScheme.error)
            }
        }
    }

    // Feuille de saisie
    if (showSheet) {
        ModalBottomSheet(onDismissRequest = { showSheet = false }) {
            Column(Modifier.fillMaxWidth().padding(16.dp), horizontalAlignment = Alignment.CenterHorizontally) {
                OutlinedTextField(
                    value = input,
                    onValueChange = { input = it },
                    label = { Text("Contenu") },
                    singleLine = true,
                    modifier = Modifier.fillMaxWidth()
                )
                Spacer(Modifier.height(12.dp))
                Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {
                    Button(
                        onClick = {
                            val text = input.trim()
                            if (text.isNotEmpty()) {
                                items = items + WriteItem.Text(text)
                                input = ""
                                showSheet = false
                            }
                        }
                    ) { Text("Ajouter texte") }

                    Button(
                        onClick = {
                            val url = input.trim()
                            if (url.isNotEmpty()) {
                                items = items + WriteItem.Url(url)
                                input = ""
                                showSheet = false
                            }
                        }
                    ) { Text("Ajouter URL") }
                }
                Spacer(Modifier.height(24.dp))
            }
        }
    }
}

private fun itemLabel(item: WriteItem): String = when (item) {
    is WriteItem.Text -> "Texte: ${item.text}"
    is WriteItem.Url  -> "URL: ${item.url}"
    is WriteItem.Phone -> "Tel: ${item.number}"
    is WriteItem.Sms -> "SMS: ${item.number} ${item.body.orEmpty()}"
    is WriteItem.Mail -> "Mail: ${item.to}"
    is WriteItem.UriItem -> "URI: ${item.uri}"
    else -> item.toString()
}

@Preview @Composable
private fun PreviewWrite() {
    WriteScreen(vm = NfcViewModel(android.app.Application()))
}
